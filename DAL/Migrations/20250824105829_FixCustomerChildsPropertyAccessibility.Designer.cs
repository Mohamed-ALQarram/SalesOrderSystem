// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824105829_FixCustomerChildsPropertyAccessibility")]
    partial class FixCustomerChildsPropertyAccessibility
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Customer_Classes.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Order_Classes.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Models.Order_Classes.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Models.Order_Classes.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProductId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Models.Order_Classes.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("Models.Order_Classes.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("StockItems", (string)null);
                });

            modelBuilder.Entity("Models.Payments_Classes.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PaymentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Payments_Classes.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Models.Customer_Classes.Company", b =>
                {
                    b.HasBaseType("Models.Customer_Classes.Customer");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Models.Customer_Classes.Person", b =>
                {
                    b.HasBaseType("Models.Customer_Classes.Customer");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FullName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Models.Payments_Classes.Cash", b =>
                {
                    b.HasBaseType("Models.Payments_Classes.Payment");

                    b.Property<decimal>("CashValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CasherName")
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Cash");
                });

            modelBuilder.Entity("Models.Payments_Classes.Check", b =>
                {
                    b.HasBaseType("Models.Payments_Classes.Payment");

                    b.Property<string>("BankID")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("Check");
                });

            modelBuilder.Entity("Models.Payments_Classes.Credit", b =>
                {
                    b.HasBaseType("Models.Payments_Classes.Payment");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.HasDiscriminator().HasValue("Credit");
                });

            modelBuilder.Entity("Models.Order_Classes.Order", b =>
                {
                    b.HasOne("Models.Customer_Classes.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Order_Classes.OrderItem", b =>
                {
                    b.HasOne("Models.Order_Classes.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Order_Classes.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Order_Classes.StockItem", b =>
                {
                    b.HasOne("Models.Order_Classes.Product", "Product")
                        .WithMany("StockItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Order_Classes.Stock", "Stock")
                        .WithMany("StockItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Models.Payments_Classes.Payment", b =>
                {
                    b.HasOne("Models.Payments_Classes.Transaction", null)
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("Models.Payments_Classes.Transaction", b =>
                {
                    b.HasOne("Models.Order_Classes.Order", "Order")
                        .WithOne()
                        .HasForeignKey("Models.Payments_Classes.Transaction", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Customer_Classes.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Order_Classes.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Models.Order_Classes.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("Models.Order_Classes.Stock", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("Models.Payments_Classes.Transaction", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
